Требования
Python: Версия 3.8 или выше
Git: Для клонирования репозитория.
Операционная система: Windows, macOS или Linux.

Шаг 1: Подготовка окружения
Создайте виртуальное окружение:
В папке проекта выполните:

python -m venv venv

Это создаст папку venv с изолированной средой Python.
Активируйте виртуальное окружение:
Windows:

venv\Scripts\activate

macOS/Linux:

source venv/bin/activate

После активации вы увидите (venv) в начале строки терминала.

Шаг 2: Установка зависимостей
Установите Flask:
В активированном виртуальном окружении выполните:

pip install flask

Это установит Flask и его зависимости.
Проверьте установку (опционально):

pip show flask

Вы увидите информацию о версии Flask.

Шаг 3: Запуск приложения
Запустите сервер:
Убедитесь, что вы в папке с файлом app.py, и выполните:

python app.py

Вы увидите сообщение:

* Running on http://127.0.0.1:5000 (Press CTRL+C to quit)

Это значит, что сервер запущен локально на порту 5000.

Шаг 4: Тестирование приложения
После запуска сервера вы можете протестировать API с помощью инструментов, таких как Postman. Ниже приведены примеры запросов, включая использование пагинации:

Создать задачу

Метод: POST

URL: http://127.0.0.1:5000/tasks
Заголовки: Content-Type: application/json
Тело:
{
    "title": "Купить молоко",
    "description": "2 литра",
    "completed": false
}
Ответ: Код 201 Created, JSON с созданной задачей.


Метод: GET
URL: http://127.0.0.1:5000/tasks?page=1&size=2
page=1: Первая страница.
size=2: По 2 задачи на странице.
Ответ: Код 200 OK, JSON с задачами (не более 2) и метаинформацией:

{
    "tasks": [
       {"id": "id1", "title": "Купить молоко", "description": "2 литра", "completed": false},
        {"id": "id2", "title": "Помыть посуду", "description": "", "completed": true}
    ],
    "total": 5,
    "page": 1,
    "size": 2,
    "total_pages": 3
}

Обновление кода:
После изменений в app.py перезапустите сервер (Ctrl+C, затем python app.py).
Проблемы:
Если python не работает, попробуйте python3.
Если порт 5000 занят, измените в app.py строку app.run(debug=True, port=5000) на другой порт.
Уточнение по пагинации
Пагинация реализована в GET /tasks и использует параметры page и size:

page: Номер страницы (начинается с 1).
size: Количество задач на странице (по умолчанию 10).
